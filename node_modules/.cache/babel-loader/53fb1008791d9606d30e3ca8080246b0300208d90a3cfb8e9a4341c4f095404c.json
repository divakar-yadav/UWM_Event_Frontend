{"ast":null,"code":"var _jsxFileName = \"/Users/divakaryadav/Documents/SRPC2025/UWM_Event_Frontend/src/CountdownTimer.js\",\n  _s = $RefreshSig$();\n// Import necessary hooks and utility functions\nimport { differenceInSeconds } from 'date-fns';\nimport { useEffect, useState } from 'react';\n\n// CountdownTimer component that takes a 'targetDate' prop and counts down to it\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountdownTimer = ({\n  targetDate\n}) => {\n  _s();\n  // State to store time remaining until the event starts\n  const [timeRemaining, setTimeRemaining] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  // State to determine if the event has started\n  const [eventStarted, setEventStarted] = useState(false);\n\n  // Effect hook to set up an interval timer and calculate time remaining\n  useEffect(() => {\n    // Function to calculate the difference between target date and current date\n    const calculateTimeRemaining = () => {\n      const now = new Date();\n      const secondsRemaining = differenceInSeconds(targetDate, now);\n\n      // If the event hasn't started, calculate the time parts\n      if (secondsRemaining > 0) {\n        const hours = Math.floor(secondsRemaining / 3600);\n        const minutes = Math.floor(secondsRemaining % 3600 / 60);\n        const seconds = secondsRemaining % 60;\n\n        // Update state with the new time remaining\n        setTimeRemaining({\n          hours,\n          minutes,\n          seconds\n        });\n      } else {\n        // Once the event starts, set time remaining to zero and indicate event has started\n        setTimeRemaining({\n          hours: 0,\n          minutes: 0,\n          seconds: 0\n        });\n        setEventStarted(true);\n      }\n    };\n\n    // Initial calculation and interval setup\n    calculateTimeRemaining();\n    const interval = setInterval(calculateTimeRemaining, 1000);\n    // Cleanup interval on component unmount\n    return () => clearInterval(interval);\n  }, [targetDate]); // Depend on targetDate, so the interval resets if the date changes\n\n  // If the event has started, render nothing\n  if (eventStarted) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  // Preparing time parts for rendering\n  const timeParts = [{\n    value: timeRemaining.hours,\n    label: 'Hours'\n  }, {\n    value: timeRemaining.minutes,\n    label: 'Minutes'\n  }, {\n    value: timeRemaining.seconds,\n    label: 'Seconds'\n  }];\n\n  // Render the countdown timer display\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Event starts in:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-2\",\n      children: timeParts.map((part, index) =>\n      /*#__PURE__*/\n      // Map over each part of the time remaining and render them with labels\n      _jsxDEV(\"div\", {\n        className: \"flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 p-2 rounded-md shadow-lg\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-white text-2xl font-bold\",\n            children: part.value.toString().padStart(2, '0')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-600 mt-1\",\n          children: part.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n};\n\n// Export the CountdownTimer component for use in other parts of the application\n_s(CountdownTimer, \"KUYxmq/7hfVkxxzu0qJHLtMrv5o=\");\n_c = CountdownTimer;\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["differenceInSeconds","useEffect","useState","Fragment","_Fragment","jsxDEV","_jsxDEV","CountdownTimer","targetDate","_s","timeRemaining","setTimeRemaining","hours","minutes","seconds","eventStarted","setEventStarted","calculateTimeRemaining","now","Date","secondsRemaining","Math","floor","interval","setInterval","clearInterval","timeParts","value","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","part","index","toString","padStart","_c","$RefreshReg$"],"sources":["/Users/divakaryadav/Documents/SRPC2025/UWM_Event_Frontend/src/CountdownTimer.js"],"sourcesContent":["// Import necessary hooks and utility functions\nimport { differenceInSeconds } from 'date-fns';\nimport { useEffect, useState } from 'react';\n\n// CountdownTimer component that takes a 'targetDate' prop and counts down to it\nconst CountdownTimer = ({ targetDate }) => {\n    // State to store time remaining until the event starts\n    const [timeRemaining, setTimeRemaining] = useState({ hours: 0, minutes: 0, seconds: 0 });\n    // State to determine if the event has started\n    const [eventStarted, setEventStarted] = useState(false);\n  \n    // Effect hook to set up an interval timer and calculate time remaining\n    useEffect(() => {\n      // Function to calculate the difference between target date and current date\n      const calculateTimeRemaining = () => {\n        const now = new Date();\n        const secondsRemaining = differenceInSeconds(targetDate, now);\n  \n        // If the event hasn't started, calculate the time parts\n        if (secondsRemaining > 0) {\n          const hours = Math.floor(secondsRemaining / 3600);\n          const minutes = Math.floor((secondsRemaining % 3600) / 60);\n          const seconds = secondsRemaining % 60;\n  \n          // Update state with the new time remaining\n          setTimeRemaining({ hours, minutes, seconds });\n        } else {\n          // Once the event starts, set time remaining to zero and indicate event has started\n          setTimeRemaining({ hours: 0, minutes: 0, seconds: 0 });\n          setEventStarted(true);\n        }\n      };\n  \n      // Initial calculation and interval setup\n      calculateTimeRemaining();\n      const interval = setInterval(calculateTimeRemaining, 1000);\n      // Cleanup interval on component unmount\n      return () => clearInterval(interval);\n    }, [targetDate]); // Depend on targetDate, so the interval resets if the date changes\n  \n    // If the event has started, render nothing\n    if (eventStarted) {\n      return <></>;\n    }\n  \n    // Preparing time parts for rendering\n    const timeParts = [\n      { value: timeRemaining.hours, label: 'Hours' },\n      { value: timeRemaining.minutes, label: 'Minutes' },\n      { value: timeRemaining.seconds, label: 'Seconds' },\n    ];\n  \n    // Render the countdown timer display\n    return (\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold mb-4\">Event starts in:</h3>\n        <div className=\"flex justify-center space-x-2\">\n          {timeParts.map((part, index) => (\n            // Map over each part of the time remaining and render them with labels\n            <div key={index} className=\"flex flex-col items-center\">\n              <div className=\"bg-gray-800 p-2 rounded-md shadow-lg\">\n                <span className=\"text-white text-2xl font-bold\">{part.value.toString().padStart(2, '0')}</span>\n              </div>\n              <span className=\"text-gray-600 mt-1\">{part.label}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n// Export the CountdownTimer component for use in other parts of the application\nexport default CountdownTimer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}